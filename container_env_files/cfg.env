# Default values are optimized for production to avoid having to configure
# much in production.
#
# However it should be easy to get going in development too. If you see an
# uncommented option that means it's either mandatory to set it or it's being
# overwritten in development to make your life easier.

# In development avoid writing out bytecode to __pycache__ directories.
PYTHONDONTWRITEBYTECODE=true

# You should generate a random string of 50+ characters for this value in prod.
SECRET_KEY=insecure_key_for_dev

# This should never be set to true in production but it should be enabled in dev.
DEBUG=true

# Root log level (default is INFO)
# Possible values are DEBUG | INFO | WARNING | ERROR | CRITICAL
ROOT_LOG_LEVEL=DEBUG

# A comma separated list of allowed hosts. In production this should be your
# domain name, such as "example.com,www.example.com" or ".example.com" to
# support both example.com and all sub-domains for your domain.
#
# This is being overwritten in development to support multiple Docker dev
# environments where you might be connecting over a local network IP address
# instead of localhost. You should not use "*" in production.
DJANGO_ALLOWED_HOSTS="*"

# The bind port for gunicorn.
#
# Be warned that if you change this value you'll need to change 8000 in both
# your Dockerfile and in a few spots in docker-compose.yml due to the nature of
# how this value can be set (Docker Compose doesn't support nested ENV vars).
GUNICORN_BIND_PORT=8001

# Docker Nginx Volume Root
DOCKER_NGINX_VOLUME_ROOT=/nginx

# The bind socket for gunicorn
GUNICORN_BIND_SOCKET=unix:${DOCKER_NGINX_VOLUME_ROOT}/gunicorn.socket

# The port exposed to the host by the nginx image.
# NGINX_HOST_PORT=8080

# A directory where the result of executing envsubst is output (default: /etc/nginx/conf.d)
# Used by the nginx docker image in the templating system in order to use the environment variables set
NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/

# You'll always want to set the POSTGRES_USER and POSTGRES_PASSWORD since the
# postgres Docker image uses them for its default database user and password.
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_NAME=postgres
POSTGRES_HOST=cfg-db
POSTGRES_PORT=5432

# What volume path should be used? In development we want to volume mount
# everything so we can develop our code without rebuilding our Docker images.
DOCKER_WEB_VOLUME=.:/app

# Restart workers when code changes.
# This setting is intended for development. It will cause workers to be restarted whenever application code changes.
GUNICORN_WEB_RELOAD=false


# Default file storage class to be used for any file-related operations that don’t specify a particular storage system.
# storages.backends.s3boto3.S3Boto3Storage – Used for S3 configuration (AWS needs to be configured)
# django.core.files.storage.FileSystemStorage – Django default
DEFAULT_FILE_STORAGE=django.core.files.storage.FileSystemStorage

FORCE_SCRIPT_NAME=/cfg/

# The Client Gateway URL. This is for triggering webhooks to invalidate its cache for example
CGW_URL=http://nginx:8000/cgw

# The Client Gateway /v1/hooks/events token.
CGW_AUTH_TOKEN=your_privileged_endpoints_token

# CSRF protection 
# See https://docs.djangoproject.com/en/dev/ref/settings/#csrf-trusted-origins
CSRF_TRUSTED_ORIGINS="http://localhost:8000"

MEDIA_URL = "http://localhost:8000/cfg/media/"
